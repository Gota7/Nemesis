cmake_minimum_required(VERSION 3.11)
project(Nemesis)

if (MINGW)
  message(STATUS "MinGW detected")
  set(WIN32 TRUE)
  set(UNIX FALSE)
  set(CMAKE_SYSTEM_NAME "Windows")
endif()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED true)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Werror")
option(STATIC_BUILD OFF)
if (${STATIC_BUILD} AND WIN32)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --static -mwindows")
endif()

if (EMSCRIPTEN)
set(BINARY_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/docs)
else()
set(BINARY_OUTPUT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/bin)
endif()
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${BINARY_OUTPUT_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${BINARY_OUTPUT_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BINARY_OUTPUT_DIR})

if (EMSCRIPTEN)
  add_definitions(-DPLATFORM_WEB)
  include_directories(lib/raylib_web/include)
  link_directories(lib/raylib_web/lib)
  set(PLATFORM "Web")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s USE_GLFW=3 -s ASSERTIONS=1 -s WASM=1 -s ALLOW_MEMORY_GROWTH=1 --preload-file res --shell-file shell.html")
  set(CMAKE_EXECUTABLE_SUFFIX ".html") # This line is used to set your executable to build with the emscripten html template so that you can directly open it.
endif()

add_subdirectory(subs/glm)
include_directories(subs/glm)
if (${STATIC_BUILD})
  add_subdirectory(subs/raylib)
  include_directories(subs/raylib)
endif()
option(YAML_CPP_BUILD_TOOLS "" OFF)
option(YAML_BUILD_SHARED_LIBS "" OFF)
add_compile_definitions(YAML_CPP_STATIC_DEFINE=1)
if (${DEBUG})
  add_compile_definitions(DEBUG=1)
else()
  add_compile_definitions(NDEBUG=1)
endif()
add_subdirectory(subs/yaml-cpp)
include_directories(subs/yaml-cpp/include)
include_directories("src")
file(GLOB_RECURSE SOURCES RELATIVE ${CMAKE_SOURCE_DIR} "src/*.cpp")

add_executable(${PROJECT_NAME} ${SOURCES})
target_link_libraries(${PROJECT_NAME} raylib yaml-cpp)
target_include_directories(${PROJECT_NAME} PUBLIC include)

if (MINGW)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -static-libgcc")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++")
  set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "${CMAKE_SHARED_LIBRARY_LINK_C_FLAGS} -static-libgcc -s")
  set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS "${CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS} -static-libgcc -static-libstdc++ -s")
endif()

if (WIN32)
  target_link_libraries(${PROJECT_NAME} imm32 opengl32 gdi32)
endif()